@page "/register"
@model RegisterModel

<div class="register-container">
    <h1>THAT'S TIME!</h1>
    <h2>Register</h2>
    <form class="register-form" method="post">
        <div asp-validation-summary="All" class="text-danger"></div>
        <input asp-for="UserName" type="text" placeholder="Username" required><br>
        <input asp-for="Password" type="password" placeholder="Password" required><br>
        <input asp-for="Email" type="email" placeholder="Email" required><br>
        <button type="submit">Register</button>
    </form>
</div>

@functions{

    public class RegisterModel: PageModel
    {
        public UserManager<IdentityUser> UserManager;
        public UserContext context;

        public RegisterModel(UserManager<IdentityUser> usrManager, UserContext ctx)
        {
            UserManager = usrManager;
            context = ctx;
        }

        [BindProperty]
        public string UserName { get; set; } = string.Empty;

        [BindProperty]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [BindProperty]
        public string Password { get; set; } = string.Empty;


        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                IdentityUser user = new IdentityUser { UserName = UserName, Email = Email };
                IdentityResult result = await UserManager.CreateAsync(user, Password);
                if (result.Succeeded)
                {
                    await UserManager.AddToRoleAsync(user, "User");
                    LetsMeet.Models.User userrecord = new User { UserName = UserName };
                    await context.AddAsync(userrecord);
                    await context.SaveChangesAsync();
                    return Redirect("/");
                }
                foreach (IdentityError err in result.Errors)
                    ModelState.AddModelError("", err.Description);
            }
            return Page();
        }
    }
}
