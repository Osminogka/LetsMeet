@page "/creategroup"
@model CreateGroupModel

<div class="m-1 text-danger" asp-validation-summary="All"></div>

<form method="post">
    <div class="form-group">
        <label>Provide group name</label>
        <input class="form-control" asp-for="GroupName" />
    </div>
    <div class="d-flex justify-content-center"> 
        <button class="btn btn-primary mt-2 text-center">Create Group</button>
    </div>
</form>

@functions{
    public class CreateGroupModel : UserPageModel
    {
        public IdentityUser User;
        public UserManager<IdentityUser> UserManager;
        public DataContext Context;
        public HttpClient Http;

        public CreateGroupModel(UserManager<IdentityUser> userManager, DataContext ctx, IHttpClientFactory httpClientFactory)
        {
            UserManager = userManager;
            Context = ctx;
            Http = httpClientFactory.CreateClient("MainClient");
        }

        public async Task OnGetAsync()
        {
            User = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
        }

        [BindProperty]
        public string GroupName { get; set; } = string.Empty;

        public async Task<IActionResult> OnPostAsync()
        {   
            IdentityUser user = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            User = user;
            Http.DefaultRequestHeaders.Add("UserId", (string)user.Id);
            Http.DefaultRequestHeaders.Add("GroupName", GroupName);
            HttpResponseMessage response = await Http.PostAsync($"/api/creategroup", null);
            if (response.IsSuccessStatusCode)
                return Redirect("/");
            return Page();
        }
    }
}
