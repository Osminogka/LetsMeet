@page "/joingroup"
@model JoinGroupModel

<div>
         <label>Provide group name</label>
         <input class="form-control" asp-for="GroupName" />
</div>

@foreach(string u in Model.GroupNames)
{
    <div class="card card-outline-primary m-1 p-1">
        <div class="bg-faded p-1">
            <h4>
                @u
            </h4>
        </div>

        <form id="@u" method="post">
            <input type="hidden" asp-for="@Model.GroupName" value="@u"/>
            <span class="card-text p-1">
                <button type="submit" class="btn btn-success btn-sm pull-right" style="float:right">
                    Join Group
                </button>
            </span>
        </form>
    </div>
}

<div>
    <ul class="pagination">
        @for (int tpage = 1; tpage <= Model.TotalPages; tpage++)
        {
            <li class="page-item @(tpage == Model.CurrentPage ? "active" : "")">
                <a class="page-link" href="/joingroup?tpage=@tpage">@tpage</a>
            </li>
        }
    </ul>
<<<<<<< Updated upstream
</div>

@functions{

    public class JoinGroupModel: UserPageModel
    {
        public DataContext Context;
        public UserManager<IdentityUser> UserManager;

        public JoinGroupModel(DataContext ctx, IHttpClientFactory httpClientFactory,UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
            Context = ctx;
        }

        public List<string> GroupNames = new List<string>();

        [BindProperty]
        public string GroupName { get; set; } = String.Empty;

        public int CurrentPage { get; set; } = 1;
        public int ItemsPerPage { get; set; } = 10;
        public int TotalItems { get; set; } = 0;
        public int TotalPages
        {
            get
            {
                return (int)Math.Ceiling((double)TotalItems / ItemsPerPage);
            }
        }


        public async Task OnGetAsync(int? tpage)
        {
            if (tpage.HasValue)
                CurrentPage = tpage.Value;

            TotalItems = await GetTotalGroups();
            GroupNames = await GetPagedGroups();
        }

        public async Task<IActionResult> OnPostAsync()
        {   
            IdentityUser TempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            GroupRecords? check = Context.GroupRecords.SingleOrDefault(obj => obj.GroupNameThatRecordBelong == GroupName && obj.UserIdThatBelongsToGroup == TempUserLocal.Id);

            if (check != null)
                return StatusCode(400);

            GroupRecords temporaryGroupRecord = new GroupRecords
            {
                UserIdThatBelongsToGroup = TempUserLocal.Id,
                GroupNameThatRecordBelong = GroupName
            };

            await Context.GroupRecords.AddAsync(temporaryGroupRecord);
            await Context.SaveChangesAsync();

            return Redirect("~/");
        }


        //////////////////////////HELPING MEHOTD//////////////////////////

        private async Task<int> GetTotalGroups()
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            List<string> GroupList = Context.Groups.Select(obj => obj.GroupName).ToList();
            foreach(string tempG in GroupList)
            {
                var checkIfBelongTo = Context.GroupRecords.SingleOrDefault(obj => obj.UserIdThatBelongsToGroup == tempUserLocal.Id && obj.GroupNameThatRecordBelong == tempG);
                if (checkIfBelongTo == null)
                    GroupNames.Add(tempG);
            }

            return GroupNames.Count;
        }

        private async Task<List<string>> GetPagedGroups()
        {
            List<string> FinalList = new List<string>();

            int startIndex = (CurrentPage - 1) * ItemsPerPage;
            for (int i = startIndex; i < ItemsPerPage + startIndex; i++)
            {
                if (i >= 0 && i < GroupNames.Count)
                    FinalList.Add(GroupNames[i]);
                else
                    break;
            }

            return FinalList;
        }
    }
}
=======
</div>
>>>>>>> Stashed changes
