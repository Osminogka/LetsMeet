@page "/"
@model MainTableModel

<header>
    <div class="header-container">
        <h1 class="center-header">Let's meet!</h1>
        <a class="left-link right-header btn btn-danger" href="logout">Log Out</a>
    </div>
</header>


<div class="container">
    <div class="right mt-4">
        <h2>Your Friends</h2>
        <div class="section">
            <ul class="list">
                @if(Model.FriendList.Count() == 0)
                {
                    <h1>No Friends</h1>
                }
                else
                {
                    @foreach(string s in Model.FriendList)
                    {
                        @s
                        <div class="mt-2">
                            <form method="post">
                                <button type="submit" class="btn btn-info  btn-sm" asp-page-handler="GetInfoAboutFriend" asp-route-arg1="@s">Get Info</button>
                                <button type="submit" class="btn btn-danger btn-sm" asp-page-handler="RemoveFriend" asp-route-FriendName="@s">Remove</button>
                            </form>
                        </div>
                    }
                }
            </ul>
        </div>
        <a class="btn btn-primary mt-2" href="addfriends">Add Friends</a>

        <h2 class="mt-3">Your Groups</h2>
        <div class="section">
            @if(Model.GroupList.Count() == 0)
            {
                    <ul class="list group-list">
                        <li class="list-item">No groups</li>
                    </ul>
            }
            else
            {
                @foreach(string s in Model.GroupList)
                {
                    <ul class="list group-list">
                        <li class="list-item">@s</li>
                        <form method="post">
                            <button type="submit" class="btn btn-info  btn-sm" asp-page-handler="LeaveGroup" asp-route-groupname="@s">Leave</button>
                        </form>
                    </ul>
                }
            }
        </div>
        <a class="btn btn-primary mt-2" href="creategroup">Create Group</a>
        <a class="btn btn-primary mt-2" href="joingroup">Join Group</a>

        <h2 class="mt-3">Friend Requests</h2>
        <div class="section">
            <ul class="list">
            @if(Model.InviteList.Count() == 0)
            {
                <h1>No Invites</h1>
            }
            else
            {
                @foreach(string s in Model.InviteList)
                {
                        @s
                        <form method="post">
                            <button type="submit" class="btn btn-info btn-sm" asp-page-handler="AddFriend" asp-route-friendname="@s">Add</button>
                            <button type="submit" class="btn btn-danger btn-sm" asp-page-handler="RejectFriend" asp-route-friendname="@s">Reject</button>
                        </form>
                }
            }
            </ul>
        </div>
    </div>
    <div class="left mt-4">
        @{
            int daysInMonth = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);
            int currentDay = 1;
            int daysInWeek = 7; // Number of days in a week
        }
        <table>
            <tr>
                @for (int i = 0; i < daysInWeek; i++)
                {
                    <td>@(currentDay <= daysInMonth ? currentDay.ToString() : "")</td>
                    currentDay++;
                }
            </tr>
            @while (currentDay <= daysInMonth)
            {
                <tr>
                    @for (int i = 0; i < daysInWeek; i++)
                    {
                        <td>@(currentDay <= daysInMonth ? currentDay.ToString() : "")</td>
                        currentDay++;
                    }
                </tr>
            }
        </table>
    </div>
</div>


@functions{

    public class MainTableModel: UserPageModel
    {
        public UserManager<IdentityUser> UserManager;
        public MonthBase Month;
        public DataContext Context;

        public MainTableModel(UserManager<IdentityUser> usrManager, IHttpClientFactory httpClientFactory, DataContext ctx)
        {
            UserManager = usrManager;
            Context = ctx;
            Month = new MonthBase()
            {
                MonthNumber = DateTime.Today.Month,
                DayAmount = MonthBase.monthDays[DateTime.Now.ToString("MMMM")],
                Meetings = new List<Record>()
            };
        }


        public List<string> GroupList = new List<string>();
        public List<string> FriendListRaw = new List<string>();
        public List<string> FriendList = new List<string>();
        public List<FriendInvite> InviteListRaw = new List<FriendInvite>();
        public List<string> InviteList = new List<string>();

        public async Task OnGetAsync()
        {
            IdentityUser user = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            //GroupList
            GroupList = Context.GroupRecords.Where(obj => obj.UserIdThatBelongsToGroup == user.Id).Select(obj => obj.GroupNameThatRecordBelong).ToList();

            //FriendList
            FriendListRaw = Context.userFriendLists.Where(obj => obj.MainUserId == user.Id || obj.FriendUserId == user.Id).
                Select(obj => obj.FriendUserId == user.Id ? obj.MainUserId : obj.FriendUserId).ToList();

            foreach (string id in FriendListRaw)
            {
                IdentityUser tempUser = await UserManager.FindByIdAsync(id);
                FriendList.Add(tempUser.UserName);
            }

            //InviteList
            InviteListRaw = Context.InviteList.Where(obj => obj.FriendUserName == user.UserName).ToList();

            foreach (FriendInvite friend in InviteListRaw)
            {
                string id = friend.MainUserId;
                IdentityUser userTemp = await UserManager.FindByIdAsync(id);
                InviteList.Add(userTemp.UserName);
            }

        }

        public async Task<IActionResult> OnPostAddFriendAsync(string friendname)
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            IdentityUser tempUserFriend = await UserManager.FindByNameAsync(friendname);

            var checkIfAnyInvites = Context.InviteList.Where(obj => obj.MainUserId == tempUserFriend.Id && obj.FriendUserName == tempUserLocal.UserName);

            if (!checkIfAnyInvites.Any())
                return StatusCode(400);

            Context.InviteList.Remove(checkIfAnyInvites.First());

            UserFriendList tempFriendRecord = new UserFriendList
            {
                    MainUserId = checkIfAnyInvites.First().MainUserId,
                    FriendUserId = tempUserLocal.Id
            };
            await Context.userFriendLists.AddAsync(tempFriendRecord);

            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostRejectFriendAsync(string friendname)
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            IdentityUser tempUserFriend = await UserManager.FindByNameAsync(friendname);

            var checkIfAnyInvites = Context.InviteList.Where(obj => obj.MainUserId == tempUserFriend.Id && obj.FriendUserName == tempUserLocal.UserName);

            if (!checkIfAnyInvites.Any())
                return StatusCode(400);

            Context.InviteList.Remove(checkIfAnyInvites.First());

            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostRemoveFriendAsync(string FriendName)
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            IdentityUser tempUserFriend = await UserManager.FindByNameAsync(FriendName);

            var tempRecord = Context.userFriendLists.Where(obj => (obj.MainUserId == tempUserLocal.Id && obj.FriendUserId == tempUserFriend.Id)
                       || (obj.MainUserId == tempUserFriend.Id && obj.FriendUserId == tempUserLocal.Id)).First();

            if (tempRecord == null)
                return StatusCode(400);

            Context.userFriendLists.Remove(tempRecord);
            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostGetInfoAboutFriendAsync(string arg1)
        {


            return RedirectToPage();
        }

        //LeaveGroup
        public async Task<IActionResult> OnPostLeaveGroupAsync(string groupname)
        {
            IdentityUser TempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            var check = Context.GroupRecords.SingleOrDefault(obj => obj.GroupNameThatRecordBelong == groupname && obj.UserIdThatBelongsToGroup == TempUserLocal.Id);

            if (check == null)
                return StatusCode(400);

            Context.GroupRecords.Remove(check);
            await Context.SaveChangesAsync();

            return RedirectToPage();
        }
    }
}