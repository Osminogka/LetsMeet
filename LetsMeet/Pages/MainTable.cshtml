@page "/"
@model MainTableModel

<header>
    <div class="header-container">
        <h1 class="center-header text-white">Let's meet!</h1>
        <a class="left-link right-header btn btn-danger" href="logout">Log Out</a>
    </div>
    <script>
        function toggleSelect() {
            var checkBox = document.getElementById('checkBox');
            var selectBox = document.getElementById('selectBox');

            if (checkBox.checked) {
                // Change the select options when the checkbox is checked
                selectBox.innerHTML = `
                    @foreach(string s in Model.GroupList)
                        {
                            <option value="@(string.Concat("Group/$/", s))">@s</option>
                        }
                `;
            } else {
                // Restore the original select options when the checkbox is unchecked
                selectBox.innerHTML = `
                    @foreach(string s in Model.FriendList)
                        {
                            <option value="@s">@s</option>
                        }
    `;
            }
        }
    </script>
</header>

<div class="container">
    <div class="right mt-4">
        <h2>Your Friends</h2>
        <div class="section">
            <ul class="list">
                @if(Model.FriendList.Count() == 0)
                {
                    <h1>No Friends</h1>
                }
                else
                {
                    @foreach(string s in Model.FriendList)
                    {
                        @s
                        <div class="mt-2">
                            <form method="post">
                                <button type="submit" class="btn btn-info  btn-sm" asp-page-handler="GetInfoAboutFriend" asp-route-arg1="@s">Get Info</button>
                                <button type="submit" class="btn btn-danger btn-sm" asp-page-handler="RemoveFriend" asp-route-FriendName="@s">Remove</button>
                            </form>
                        </div>
                    }
                }
            </ul>
        </div>
        <a class="btn btn-primary mt-2" href="addfriends">Add Friends</a>

        <h2 class="mt-3">Your Groups</h2>
        <div class="section">
            @if(Model.GroupList.Count() == 0)
            {
                    <ul class="list group-list">
                        <li class="list-item">No groups</li>
                    </ul>
            }
            else
            {
                @foreach(string s in Model.GroupList)
                {
                    <ul class="list group-list">
                        <li class="list-item">@s</li>
                        <form method="post">
                            <button type="submit" class="btn btn-info  btn-sm" asp-page-handler="LeaveGroup" asp-route-groupname="@s">Leave</button>
                        </form>
                    </ul>
                }
            }
        </div>
        <a class="btn btn-primary mt-2" href="creategroup">Create Group</a>
        <a class="btn btn-primary mt-2" href="joingroup">Join Group</a>

        <h2 class="mt-3">Friend Requests</h2>
        <div class="section">
            <ul class="list">
            @if(Model.InviteList.Count() == 0)
            {
                <h1>No Invites</h1>
            }
            else
            {
                @foreach(string s in Model.InviteList)
                {
                        @s
                        <form method="post">
                            <button type="submit" class="btn btn-info btn-sm" asp-page-handler="AddFriend" asp-route-friendname="@s">Add</button>
                            <button type="submit" class="btn btn-danger btn-sm" asp-page-handler="RejectFriend" asp-route-friendname="@s">Reject</button>
                        </form>
                }
            }
            </ul>
        </div>
    </div>
    <div class="left mt-4">
        <h1>Selected Month: @HttpContext.Session.GetInt32("SelectedMonth")</h1>
        <table>
            @{
                int? daysInMonth = HttpContext.Session.GetInt32("DayAmount");
                int currentDay = 1;
                int daysInWeek = 7; // Number of days in a week
            }
            @while (currentDay <= daysInMonth)
            {
                <tr>
                    @for (int i = 0; i < daysInWeek; i++)
                    {
                        if(currentDay == Model.Month.CurrentDay)
                        {
                            <td class="highlighted-cell">                                
                                <form method="post">
                                    <button type="submit" class="text-warning" asp-page-handler="getdayinfo" asp-route-daynumber="@Model.Month.CurrentDay">
                                        @(currentDay <= daysInMonth ? currentDay.ToString() : "")
                                    </button>
                                </form>
                            </td>
                        }
                        else
                        {
                            <td>
                                <form method="post">
                                        <button type="submit" class="text-warning" asp-page-handler="getdayinfo" asp-route-daynumber="@(currentDay <= daysInMonth ? currentDay.ToString() : "")">
                                        @(currentDay <= daysInMonth ? currentDay.ToString() : "")
                                    </button>
                                </form>
                            </td>
                        }
                        currentDay++;
                    }
                </tr>
            }
        </table>
        <form method="post">
            <button type="submit" class="left-arrow-button mt-2" asp-page-handler="prevmonth"></button>
            <button type="submit" class="arrow-button mt-2" asp-page-handler="nextmonth"></button>
        </form>
        <div>
            @if(HttpContext.Session.GetInt32("SelectedDay") > 31)
            {
                <h1>Day is not selected</h1>
            }
            else
            {
                <h1>Selected day: @HttpContext.Session.GetInt32("SelectedDay")</h1>
                <form method="post">
                    <span asp-validation-for="RecordCreateError" class="text-danger"></span>
                    <div>
                        <input type="checkbox" id="checkBox" onclick="toggleSelect()" /> Mark the checkbox to create record for the group.
                    </div>
                    <select id="selectBox" asp-for="FriendName" class="form-control">
                        @foreach(string s in Model.FriendList)
                        {
                            <option value="@s">@s</option>
                        }
                    </select>
                    <div class="form-group">
                        <label>Record name</label>
                        <input class="form-control" asp-for="RecordName" />
                    </div>
                    <div class="form-group">
                        <label>Record content</label>
                        <input class="form-control" asp-for="RecordDis" />
                    </div>
                    <button type="submit" class="btn btn-warning mt-3" asp-page-handler="createrecord">Create Record</button>
                </form>
            }
        </div>
    </div>
</div>

 <div>
    @foreach (var tempRec in Model.RecordsList ?? Enumerable.Empty<Record>())
    {
        @if (HttpContext.Session.GetInt32("SelectedDay") > 31)
        {
            <div>
                @{
                    await Html.RenderPartialAsync($"RecordSummary", tempRec);
                }
            </div>
        }
        else if(HttpContext.Session.GetInt32("SelectedDay") == tempRec.DayNumber)
        {
            <div>
                @{
                    await Html.RenderPartialAsync($"RecordSummary", tempRec);
                }
            </div>
        }
    }
</div>

@functions{

    public class MainTableModel: UserPageModel
    {

        //fills to manage databases

        public UserManager<IdentityUser> UserManager;
        public DataContext Context;

        public MainTableModel(UserManager<IdentityUser> usrManager, IHttpClientFactory httpClientFactory, DataContext ctx)
        {
            UserManager = usrManager;
            Context = ctx;
        }

        //Information about current month

        public MonthBase Month = new MonthBase();

        //Selected day

        public int? SelectedDay { get; set; } = 999;

        //Property to create record

        [BindProperty]
        public string FriendName { get; set; }
        [BindProperty]
        public string RecordName { get; set; }
        [BindProperty]
        public string RecordDis { get; set; }


        ///////////////////////////////////////////////////////////////////


        //List to fill main information

        public List<string> GroupList = new List<string>();
        public List<string> FriendListRaw = new List<string>();
        public List<string> FriendList = new List<string>();
        public List<FriendInvite> InviteListRaw = new List<FriendInvite>();
        public List<string> InviteList = new List<string>();
        public List<Record> RecordsList = new List<Record>();


        /////////////////////////////////////////////////////////////////


        //Properties for errors

        public string RecordCreateError { get; set; }

        public string InvalidInvite { get; set; }

        public string InvalidFriend { get; set; }

        public string InvalidGroup { get; set; }

        public string InvalidDay { get; set; }


        /////////////////////////////////////////////////////////////////


        /////////////////////////////GET METHODS///////////////////////////////////

        public async Task OnGetAsync()
        {
            await LoadUserData();
        }

        /////////////////////////////////////////////////////////////////



        /////////////////////////////POST METHODS///////////////////////////////////

        public async Task<IActionResult> OnPostAddFriendAsync(string friendname)
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            IdentityUser tempUserFriend = await UserManager.FindByNameAsync(friendname);

            var checkIfAnyInvites = Context.InviteList.Where(obj => obj.MainUserId == tempUserFriend.Id && obj.FriendUserName == tempUserLocal.UserName);

            if (!checkIfAnyInvites.Any())
            {
                ModelState.AddModelError("InvalidInvite", "invite doesn't exist");
                await LoadUserData();
                return Page();
            }

            Context.InviteList.Remove(checkIfAnyInvites.First());

            UserFriendList tempFriendRecord = new UserFriendList
            {
                    MainUserId = checkIfAnyInvites.First().MainUserId,
                    FriendUserId = tempUserLocal.Id
            };
            await Context.userFriendLists.AddAsync(tempFriendRecord);

            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostRejectFriendAsync(string friendname)
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            IdentityUser tempUserFriend = await UserManager.FindByNameAsync(friendname);

            var checkIfAnyInvites = Context.InviteList.Where(obj => obj.MainUserId == tempUserFriend.Id && obj.FriendUserName == tempUserLocal.UserName);

            if (!checkIfAnyInvites.Any())
            {
                ModelState.AddModelError("InvalidInvite", "invite doesn't exist");
                await LoadUserData();
                return Page();
            }

            Context.InviteList.Remove(checkIfAnyInvites.First());

            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostRemoveFriendAsync(string FriendName)
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            IdentityUser tempUserFriend = await UserManager.FindByNameAsync(FriendName);

            var tempRecord = Context.userFriendLists.Where(obj => (obj.MainUserId == tempUserLocal.Id && obj.FriendUserId == tempUserFriend.Id)
                       || (obj.MainUserId == tempUserFriend.Id && obj.FriendUserId == tempUserLocal.Id)).First();

            if (tempRecord == null)
            {
                ModelState.AddModelError("InvalidFriend", "you don't have such friend");
                return Page();
            }

            Context.userFriendLists.Remove(tempRecord);
            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostGetInfoAboutFriendAsync(string arg1)
        {


            return RedirectToPage();
        }

        //LeaveGroup
        public async Task<IActionResult> OnPostLeaveGroupAsync(string groupname)
        {
            IdentityUser TempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            var check = Context.GroupRecords.SingleOrDefault(obj => obj.GroupNameThatRecordBelong == groupname && obj.UserIdThatBelongsToGroup == TempUserLocal.Id);

            if (check == null)
            {
                ModelState.AddModelError("InvalidGroup", "you don't participate in such group");
                await LoadUserData();
                return Page();
            }

            Context.GroupRecords.Remove(check);
            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        //getdayinfo
        public async Task<IActionResult> OnPostGetDayInfoAsync(int daynumber)
        {
            if (daynumber < 0 && daynumber > 31)
            {
                ModelState.AddModelError("InvalidDay", "you entered invalid day number");
                await LoadUserData();
                return Page();
            }

            if(daynumber == 0)
            {
                HttpContext.Session.SetInt32("SelectedDay", 999);
                return RedirectToPage();
            }

            HttpContext.Session.SetInt32("SelectedDay", daynumber);

            return RedirectToPage();
        }

        //createrecord
        public async Task<IActionResult> OnPostCreateRecordAsync()
        {
            IdentityUser tempUserLocal = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);


            int tempSelectedDay = HttpContext.Session.GetInt32("SelectedDay") == null ? 99 : (int)HttpContext.Session.GetInt32("SelectedDay"); 
            int tempSelectedMonth = HttpContext.Session.GetInt32("SelectedMonth") == null ? 99 : (int)HttpContext.Session.GetInt32("SelectedMonth"); 
            if ((0 >= tempSelectedDay || tempSelectedDay > 31) || (tempSelectedMonth < 1 || tempSelectedMonth > 12))
            {
                ModelState.AddModelError("RecordCreateError", "unexisting day or month");
                await LoadUserData();
                return Page();
            }

            Record tempRecord = new Record();

            if (FriendName.StartsWith("Group/$/"))
            {
                FriendName = FriendName.Substring("Group/$/".Length);
                var tempFriendRecord = Context.Groups.FirstOrDefault(obj => obj.GroupName == FriendName && obj.CreatorId == tempUserLocal.Id);
                if (tempFriendRecord == null)
                {
                    ModelState.AddModelError("RecordCreateError", "Invalid group");
                    await LoadUserData();
                    return Page();
                }

                var checkForRecords = Context.Records.SingleOrDefault(obj => obj.RecordCreatorId == tempUserLocal.Id && obj.GroupName == FriendName && obj.RecordName == RecordName);
                if(checkForRecords != null)
                {
                    ModelState.AddModelError("RecordCreateError", "Record with such name for this group already exist");
                    await LoadUserData();
                    return Page();
                }

                tempRecord.RecordCreatorId = tempUserLocal.Id;
                tempRecord.RelatedUserId = "none";
                tempRecord.RecordName = RecordName;
                tempRecord.RecordString = RecordDis;
                tempRecord.GroupName = FriendName;
                tempRecord.DayNumber = (int)tempSelectedDay;
                tempRecord.MonthNumber = (int)tempSelectedMonth;
                tempRecord.CreaterUserName = tempUserLocal.UserName;
            }
            else
            {
                IdentityUser tempFriend = await UserManager.FindByNameAsync(FriendName);
                var tempFriendRecord = Context.userFriendLists.FirstOrDefault(obj => (obj.MainUserId == tempUserLocal.Id && obj.FriendUserId == tempFriend.Id)
                       || (obj.MainUserId == tempFriend.Id && obj.FriendUserId == tempUserLocal.Id));

                if (tempFriendRecord == null)
                {
                    ModelState.AddModelError("RecordCreateError", "You don't have this user in friend list");
                    await LoadUserData();
                    return Page();
                }

                var checkForRecords = Context.Records.SingleOrDefault(obj => obj.RecordCreatorId == tempUserLocal.Id && obj.RelatedUserId == tempFriend.Id && obj.RecordName == RecordName);
                if(checkForRecords != null)
                {
                    ModelState.AddModelError("RecordCreateError", "Record with such name and user already exist");
                    await LoadUserData();
                    return Page();
                }

                tempRecord.RecordCreatorId = tempUserLocal.Id;
                tempRecord.RelatedUserId = tempFriend.Id;
                tempRecord.RecordName = RecordName;
                tempRecord.RecordString = RecordDis;
                tempRecord.GroupName = "None";
                tempRecord.DayNumber = (int)tempSelectedDay;
                tempRecord.MonthNumber = (int)tempSelectedMonth;
                tempRecord.CreaterUserName = tempUserLocal.UserName;
            }


            if(!tempRecord.IsValid())
            {
                ModelState.AddModelError("RecordCreateError", "Error while creating record");
                await LoadUserData();
                return Page();
            }   

            await Context.Records.AddAsync(tempRecord);
            await Context.SaveChangesAsync();

            return RedirectToPage();
        }

        //prevmonth
        public async Task<IActionResult> OnPostPrevMonthAsync()
        {
            var tempSelectedMonth = HttpContext.Session.GetInt32("SelectedMonth");

            if (tempSelectedMonth - 1 <= 0)
                HttpContext.Session.SetInt32("SelectedMonth", 12);
            else
                HttpContext.Session.SetInt32("SelectedMonth", (int)tempSelectedMonth - 1);

            return RedirectToPage();
        }

        //nextmonth
        public async Task<IActionResult> OnPostNextMonthAsync()
        {
            var tempSelectedMonth = HttpContext.Session.GetInt32("SelectedMonth");
            if (tempSelectedMonth + 1 > 12)
                HttpContext.Session.SetInt32("SelectedMonth", 1);
            else
                HttpContext.Session.SetInt32("SelectedMonth", (int)tempSelectedMonth + 1);

            return RedirectToPage();
        }

        /////////////////////////////////////////////////////////////////



        /////////////////////////////CUSTOM METHODS///////////////////////////////////

        private async Task LoadUserData()
        {
            var tempSelectedDay = HttpContext.Session.GetInt32("SelectedDay");

            if (tempSelectedDay != null)
                SelectedDay = tempSelectedDay;

            var tempSelectedMonth = HttpContext.Session.GetInt32("SelectedMonth");
            if(tempSelectedMonth != null)
            {
                Month = new MonthBase()
                    {
                        MonthNumber = (int)tempSelectedMonth,
                        DayAmount = MonthInfo.monthDays[MonthInfo.monthDictionary[(int)tempSelectedMonth]],
                        Meetings = new List<Record>(),
                        CurrentDay = 999
                    };
            }
            else
            {
                Month = new MonthBase()
                    {
                        MonthNumber = DateTime.Today.Month,
                        DayAmount = MonthInfo.monthDays[DateTime.Now.ToString("MMMM")],
                        Meetings = new List<Record>(),
                        CurrentDay = DateTime.Now.Day
                    };
            }

            HttpContext.Session.SetInt32("SelectedMonth", Month.MonthNumber);      
            HttpContext.Session.SetInt32("DayAmount", Month.DayAmount);

            IdentityUser user = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            //GroupList
            GroupList = Context.GroupRecords.Where(obj => obj.UserIdThatBelongsToGroup == user.Id).Select(obj => obj.GroupNameThatRecordBelong).ToList();

            //FriendList
            FriendListRaw = Context.userFriendLists.Where(obj => obj.MainUserId == user.Id || obj.FriendUserId == user.Id).
                Select(obj => obj.FriendUserId == user.Id ? obj.MainUserId : obj.FriendUserId).ToList();

            foreach (string id in FriendListRaw)
            {
                IdentityUser tempUser = await UserManager.FindByIdAsync(id);
                FriendList.Add(tempUser.UserName);
            }

            //InviteList
            InviteListRaw = Context.InviteList.Where(obj => obj.FriendUserName == user.UserName).ToList();

            foreach (FriendInvite friend in InviteListRaw)
            {
                string id = friend.MainUserId;
                IdentityUser userTemp = await UserManager.FindByIdAsync(id);
                InviteList.Add(userTemp.UserName);
            }

            //Records
            foreach(string tempGroup in GroupList)
                RecordsList = Context.Records.Where(obj => (obj.RecordCreatorId == user.Id || obj.RelatedUserId == user.Id || obj.GroupName==tempGroup) && obj.MonthNumber == Month.MonthNumber ).ToList();
        }
    }
}