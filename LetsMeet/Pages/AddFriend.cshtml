@page "/addfriends"
@model AddFriendModel


<div>
    <form method="get" asp-page="/addfriends"  asp-route-parameterName="">
         <label>Provide friend name</label>
         <input class="form-control" name="UserName" />
         <button type="submit" class="btn btn-info mt-2">Search</button>
    </form>
</div>

@foreach(string u in Model.UsersNames)
{
    <div class="card card-outline-primary m-1 p-1">
        <div class="bg-faded p-1">
            <h4>
                @u
            </h4>
        </div>

        <form id="@u" method="post">
            <input type="hidden" asp-for="@Model.FriendUserName" value="@u"/> 
            <span class="card-text p-1">
                <button type="submit" class="btn btn-success btn-sm pull-right" style="float:right">
                    Add To Friends
                </button>
            </span>
        </form>
    </div>
}

<div>
    <ul class="pagination">
        @for (int tpage = 1; tpage <= Model.TotalPages; tpage++)
        {
            <li class="page-item @(tpage == Model.CurrentPage ? "active" : "")">
                <a class="page-link" href="/addfriends?tpage=@tpage">@tpage</a>
            </li>
        }
    </ul>
</div>



@functions{

    public class AddFriendModel: UserPageModel
    {
        public IdentityUser User;
        public UserManager<IdentityUser> UserManager;
        public DataContext Context;
        public UserContext ContextUser;


        public List<string> UsersNames = new List<string>();


        [BindProperty]
        public string FriendUserName { get; set; } = string.Empty;

        public AddFriendModel(UserManager<IdentityUser> userManager, DataContext ctx, UserContext ctx2, IHttpClientFactory httpClientFactory)
        {
            UserManager = userManager;
            Context = ctx;
            ContextUser = ctx2;
        }

        public int CurrentPage { get; set; } = 1;
        public int ItemsPerPage { get; set; } = 10;
        public int TotalItems { get; set; } = 0;
        public int TotalPages
        {
            get
            {
                return (int)Math.Ceiling((double)TotalItems / ItemsPerPage);
            }
        }

        public async Task OnGetAsync(string? username, int? tpage)
        {
            if(!string.IsNullOrEmpty(username))
            {
                User tempUser = ContextUser.Users.SingleOrDefault(obj => obj.UserName == username);
                if (tempUser == null)
                    return;

                UsersNames.Add(username);
                TotalItems = 1;
                return;
            }

            if (tpage.HasValue)
            {
                CurrentPage = tpage.Value;
            }

            TotalItems = await GetTotalUsers();
            UsersNames = await GetPagedUser();
        }

        private async Task<List<string>> GetPagedUser()
        {
            //User = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            //UsersNames = ContextUser.Users.Select(obj => obj.UserName).Where(obj => obj != User.UserName).ToList();
            List<string> FinalList = new List<string>();

            int startIndex = (CurrentPage - 1) * ItemsPerPage;
            for (int i = startIndex; i < ItemsPerPage + startIndex; i++)
            {
                if (i >= 0 && i < UsersNames.Count)
                    FinalList.Add(UsersNames[i]);
                else
                    break;
            }

            return FinalList;
        }

        private async Task<int> GetTotalUsers()
        {
            User = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);
            List<string> TempUsers = ContextUser.Users.Select(obj => obj.UserName).Where(obj => obj != User.UserName).ToList();
            List<string> TempFriendList = Context.userFriendLists.Select(obj => obj.MainUserName == User.UserName ? obj.FriendUserName : obj.MainUserName).ToList();

            foreach(string fName in TempUsers)
            {
                if (!TempFriendList.Contains(fName))
                    UsersNames.Add(fName);
            }

            return UsersNames.Count;
        }

        public async Task<IActionResult> OnPostAsync()
        {   
            IdentityUser LocalUser = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

            try
            {
                var tempRecord = Context.userFriendLists.Where(obj => (obj.MainUserName == LocalUser.UserName && obj.FriendUserName == FriendUserName)
                        || (obj.MainUserName == FriendUserName && obj.FriendUserName == LocalUser.UserName));

                if (tempRecord.Any())
                    return StatusCode(400);

                FriendInvite invite = new FriendInvite
                {
                    MainUserName = LocalUser.UserName,
                    FriendUserName = FriendUserName
                };

                FriendInvite? check = Context.InviteList.SingleOrDefault(obj => obj.MainUserName == LocalUser.UserName && obj.FriendUserName == FriendUserName);

                if (check != null)
                    return StatusCode(400);

                await Context.InviteList.AddAsync(invite);
                await Context.SaveChangesAsync();

                return Redirect("~/");
            }
            catch(Exception ex)
            {
                return StatusCode(401);
            }
        }
    }
}
